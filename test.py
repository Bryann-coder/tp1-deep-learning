import requests
import json
from PIL import Image
import numpy as np

# URL de l'API qui tourne dans le conteneur Docker
API_URL = "http://localhost:5000/predict"
# Chemin vers l'image que vous avez cr√©√©e
IMAGE_PATH = "mon_chiffre.png"

def prepare_image(image_path):
    """Charge, pr√©-traite et pr√©pare une image pour l'API MNIST."""
    # 1. Charger l'image en niveaux de gris
    img = Image.open(image_path).convert('L')
    
    # 2. Redimensionner en 28x28 pixels (format MNIST)
    img = img.resize((28, 28))
    
    # 3. Transformer l'image en tableau NumPy
    image_array = np.array(img)
    
    # 4. Aplatir le tableau 28x28 en un vecteur de 784 √©l√©ments
    # et le convertir en liste pour la s√©rialisation JSON
    return image_array.flatten().tolist()

if __name__ == "__main__":
    # Pr√©parer l'image
    print(f"Pr√©paration de l'image '{IMAGE_PATH}'...")
    image_data = prepare_image(IMAGE_PATH)
    
    # Cr√©er le payload JSON
    payload = json.dumps({"image": image_data})
    
    # D√©finir les headers
    headers = {'Content-Type': 'application/json'}
    
    print("üöÄ Envoi de la requ√™te √† l'API...")
    
    try:
        # Envoyer la requ√™te POST √† l'API
        response = requests.post(API_URL, headers=headers, data=payload)
        
        # V√©rifier si la requ√™te a r√©ussi
        if response.status_code == 200:
            result = response.json()
            prediction = result.get('prediction')
            probabilities = result.get('probabilities', [])
            
            print("\n‚úÖ Pr√©diction re√ßue !")
            print(f"   Le mod√®le pense que ce chiffre est un : {prediction}")
            
            # --- MODIFICATION ICI ---
            if probabilities:
                # Cr√©er une liste de paires (chiffre, probabilit√©)
                probs_list = probabilities[0]
                predictions_avec_probs = list(enumerate(probs_list))
                
                # Trier la liste par probabilit√©, en ordre d√©croissant
                predictions_triees = sorted(predictions_avec_probs, key=lambda item: item[1], reverse=True)
                
                # Afficher les 3 pr√©dictions les plus probables
                print("\nüìä Top des pr√©dictions les plus probables :")
                for i, (chiffre, prob) in enumerate(predictions_triees[:10]):
                    print(f"   {i+1}. Chiffre {chiffre} (Confiance : {prob:.2%})")

        else:
            print(f"\n‚ùå Erreur: Le serveur a r√©pondu avec le code {response.status_code}")
            print(f"   Message: {response.text}")
            
    except requests.exceptions.ConnectionError as e:
        print("\n‚ùå Erreur de connexion !")
        print("   Impossible de se connecter √† l'API. Assurez-vous que le conteneur Docker est bien en cours d'ex√©cution.")
        print(f"   Commande √† lancer : docker run -d -p 5000:5000 mnist-api")